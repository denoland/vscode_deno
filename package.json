{
  "name": "vscode-deno",
  "displayName": "Deno",
  "description": "A language server client for Deno.",
  "author": "Deno Land Inc.",
  "license": "MIT",
  "version": "3.19.1",
  "icon": "deno.png",
  "galleryBanner": {
    "color": "#3B3738",
    "theme": "dark"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/denoland/vscode_deno"
  },
  "bugs": {
    "url": "https://github.com/denoland/vscode_deno/issues"
  },
  "publisher": "denoland",
  "categories": [
    "Programming Languages",
    "Formatters",
    "Linters",
    "Debuggers",
    "Other"
  ],
  "keywords": [
    "deno"
  ],
  "engines": {
    "vscode": "^1.60.0"
  },
  "activationEvents": [
    "onLanguage:typescript",
    "onLanguage:typescriptreact",
    "onLanguage:javascript",
    "onLanguage:javascriptreact",
    "onLanguage:markdown",
    "onLanguage:json",
    "onLanguage:jsonc",
    "onDebugInitialConfigurations",
    "onDebugResolve:typescript",
    "onDebugResolve:typescriptreact",
    "onDebugResolve:javascript",
    "onDebugResolve:javascriptreact",
    "onCommand:deno.welcome",
    "onCommand:deno.initializeWorkspace",
    "onCommand:deno.reloadImportRegistries",
    "onWebviewPanel:welcomeDeno"
  ],
  "main": "./client/dist/main",
  "contributes": {
    "breakpoints": [
      {
        "language": "typescript"
      },
      {
        "language": "javascript"
      },
      {
        "language": "typescriptreact"
      },
      {
        "language": "javascriptreact"
      }
    ],
    "debuggers": [
      {
        "type": "deno",
        "label": "Deno",
        "runtime": "deno",
        "languages": [
          "typescript",
          "javascript",
          "typescriptreact",
          "javascriptreact"
        ]
      }
    ],
    "commands": [
      {
        "command": "deno.cache",
        "title": "Cache Dependencies",
        "category": "Deno",
        "description": "Cache the active workspace document and its dependencies.",
        "enablement": "deno:lspReady"
      },
      {
        "command": "deno.initializeWorkspace",
        "title": "Initialize Workspace Configuration",
        "category": "Deno",
        "description": "Initialize the workspace configuration for Deno."
      },
      {
        "command": "deno.reloadImportRegistries",
        "title": "Reload Import Registries Cache",
        "category": "Deno",
        "description": "Reload any cached import registry responses.",
        "enablement": "deno:lspReady"
      },
      {
        "command": "deno.restart",
        "title": "Restart Language Server",
        "category": "Deno",
        "description": "Restart the Deno language server."
      },
      {
        "command": "deno.status",
        "title": "Language Server Status",
        "category": "Deno",
        "description": "Provide a status document of the language server.",
        "enablement": "deno:lspReady"
      },
      {
        "command": "deno.welcome",
        "title": "Welcome",
        "category": "Deno",
        "description": "Open the welcome page for the Deno extension."
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Deno",
      "properties": {
        "deno.enable": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Controls if the Deno Language Server is enabled. When enabled, the extension will disable the built-in VSCode JavaScript and TypeScript language services, and will use the Deno Language Server instead.\n\nIf you want to enable only part of your workspace folder, consider using `deno.enablePaths` setting instead.\n\n**Not recommended to be enabled globally.**",
          "scope": "resource",
          "examples": [
            true,
            false
          ]
        },
        "deno.cacheOnSave": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Controls if the extension should cache the active document's dependencies on save.",
          "scope": "resource",
          "examples": [
            true,
            false
          ]
        },
        "deno.enablePaths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "markdownDescription": "Enables the Deno Language Server for specific paths, instead of for the whole workspace folder. This will disable the built in TypeScript/JavaScript language server for those paths.\n\nWhen a value is set, the value of `\"deno.enable\"` is ignored.\n\nThe workspace folder is used as the base for the supplied paths. If for example you have all your Deno code in `worker` path in your workspace, you can add an item with the value of `./worker`, and the Deno will only provide diagnostics for the files within `worker` or any of its sub paths.\n\n**Not recommended to be enabled in user settings.**",
          "scope": "resource",
          "examples": [
            [
              "./worker"
            ]
          ]
        },
        "deno.path": {
          "type": "string",
          "default": null,
          "markdownDescription": "A path to the `deno` CLI executable. By default, the extension looks for `deno` in the `PATH`, but if set, will use the path specified instead.",
          "scope": "window",
          "examples": [
            "/usr/bin/deno",
            "C:\\Program Files\\deno\\deno.exe"
          ]
        },
        "deno.cache": {
          "type": "string",
          "default": null,
          "markdownDescription": "A path to the cache directory for Deno. By default, the operating system's cache path plus `deno` is used, or the `DENO_DIR` environment variable, but if set, this path will be used instead.",
          "scope": "window"
        },
        "deno.certificateStores": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": null,
          "markdownDescription": "A list of root certificate stores used to validate TLS certificates when fetching and caching remote resources. This overrides the `DENO_TLS_CA_STORE` environment variable if set.",
          "scope": "window"
        },
        "deno.codeLens.implementations": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enables or disables the display of code lens information for implementations of items in the code.",
          "scope": "window",
          "examples": [
            true,
            false
          ]
        },
        "deno.codeLens.references": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enables or disables the display of code lens information for references of items in the code.",
          "scope": "window",
          "examples": [
            true,
            false
          ]
        },
        "deno.codeLens.referencesAllFunctions": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enables or disables the display of code lens information for all functions in the code.",
          "scope": "window",
          "examples": [
            true,
            false
          ]
        },
        "deno.codeLens.test": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enables or disables the display of code lenses that allow running of individual tests in the code.",
          "scope": "resource"
        },
        "deno.codeLens.testArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "--allow-all",
            "--no-check"
          ],
          "markdownDescription": "Additional arguments to use with the run test code lens.  Defaults to `[ \"--allow-all\", \"--no-check\" ]`.",
          "scope": "resource"
        },
        "deno.config": {
          "type": "string",
          "default": null,
          "markdownDescription": "The file path to a configuration file. This is the equivalent to using `--config` on the command line. The path can be either be relative to the workspace, or an absolute path.\n\nIt is recommend you name it `deno.json` or `deno.jsonc`.\n\n**Not recommended to be set globally.**",
          "scope": "window",
          "examples": [
            "./deno.jsonc",
            "/path/to/deno.jsonc",
            "C:\\path\\to\\deno.jsonc"
          ]
        },
        "deno.documentPreloadLimit": {
          "type": "number",
          "markdownDescription": "Maximum number of file system entries to traverse when finding scripts to preload into TypeScript on startup. Set this to 0 to disable document preloading.",
          "default": 1000,
          "scope": "resource",
          "examples": [
            0,
            100,
            1000
          ]
        },
        "deno.importMap": {
          "type": "string",
          "default": null,
          "markdownDescription": "The file path to an import map. This is the equivalent to using `--import-map` on the command line.\n\n[Import maps](https://deno.land/manual@v1.6.0/linking_to_external_code/import_maps) provide a way to \"relocate\" modules based on their specifiers. The path can either be relative to the workspace, or an absolute path.\n\n**Not recommended to be set globally.**",
          "scope": "window",
          "examples": [
            "./import_map.json",
            "/path/to/import_map.json",
            "C:\\path\\to\\import_map.json"
          ]
        },
        "deno.inlayHints.parameterNames.enabled": {
          "type": "string",
          "enum": [
            "none",
            "literals",
            "all"
          ],
          "enumDescriptions": [
            "Disable inlay hints for parameters.",
            "Display inlay hints for literal arguments.",
            "Display inlay hints for all literal and non-literal arguments."
          ],
          "default": "none",
          "markdownDescription": "Enable/disable inlay hints for parameter names.",
          "scope": "resource"
        },
        "deno.inlayHints.parameterNames.suppressWhenArgumentMatchesName": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Do not display an inlay hint when the argument name matches the parameter.",
          "scope": "resource"
        },
        "deno.inlayHints.parameterTypes.enabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enable/disable inlay hints for implicit parameter types.",
          "scope": "resource"
        },
        "deno.inlayHints.variableTypes.enabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enable/disable inlay hints for implicit variable types.",
          "scope": "resource"
        },
        "deno.inlayHints.variableTypes.suppressWhenTypeMatchesName": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Suppress type hints where the variable name matches the implicit type.",
          "scope": "resource"
        },
        "deno.inlayHints.propertyDeclarationTypes.enabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enable/disable inlay hints for implicit property declarations.",
          "scope": "resource"
        },
        "deno.inlayHints.functionLikeReturnTypes.enabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enable/disable inlay hints for implicit function return types.",
          "scope": "resource"
        },
        "deno.inlayHints.enumMemberValues.enabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enable/disable inlay hints for enum values.",
          "scope": "resource"
        },
        "deno.maxTsServerMemory": {
          "type": "number",
          "markdownDescription": "Maximum amount of memory the TypeScript isolate can use. Defaults to 3072 (3GB).",
          "default": 3072,
          "scope": "resource"
        },
        "deno.suggest.autoImports": {
          "type": "boolean",
          "default": true,
          "scope": "window"
        },
        "deno.suggest.completeFunctionCalls": {
          "type": "boolean",
          "default": false,
          "scope": "window"
        },
        "deno.suggest.names": {
          "type": "boolean",
          "default": true,
          "scope": "window"
        },
        "deno.suggest.paths": {
          "type": "boolean",
          "default": true,
          "scope": "window"
        },
        "deno.suggest.imports.autoDiscover": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "If enabled, when new hosts/origins are encountered that support import suggestions, you will be prompted to enable or disable it.  Defaults to `true`.",
          "scope": "window"
        },
        "deno.suggest.imports.hosts": {
          "type": "object",
          "default": {
            "https://deno.land": true
          },
          "markdownDescription": "Controls which hosts are enabled for import suggestions.",
          "scope": "window",
          "examples": {
            "https://deno.land": true
          }
        },
        "deno.testing.args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "--allow-all",
            "--no-check"
          ],
          "markdownDescription": "Arguments to use when running tests via the Test Explorer.  Defaults to `[ \"--allow-all\" ]`.",
          "scope": "window"
        },
        "deno.testing.enable": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Enable the testing API for the language server. When folder is Deno enabled, tests will be available in the Test Explorer view.",
          "scope": "window"
        },
        "deno.tlsCertificate": {
          "type": "string",
          "default": null,
          "markdownDescription": "A path to a PEM certificate to use as the certificate authority when validating TLS certificates when fetching and caching remote resources. This is like using `--cert` on the Deno CLI and overrides the `DENO_CERT` environment variable if set.",
          "scope": "window"
        },
        "deno.unsafelyIgnoreCertificateErrors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": null,
          "markdownDescription": "**DANGER** disables verification of TLS certificates for the hosts provided. There is likely a better way to deal with any errors than use this option. This is like using `--unsafely-ignore-certificate-errors` in the Deno CLI.",
          "scope": "window"
        },
        "deno.unstable": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Controls if code will be type checked with Deno's unstable APIs. This is the equivalent to using `--unstable` on the command line.\n\n**Not recommended to be enabled globally.**",
          "scope": "window",
          "examples": [
            true,
            false
          ]
        },
        "deno.lint": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Controls if linting information will be provided by the Deno Language Server.\n\n**Not recommended to be enabled globally.**",
          "scope": "window",
          "examples": [
            true,
            false
          ]
        },
        "deno.internalDebug": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Determines if the internal debugging information for the Deno language server will be logged to the _Deno Language Server_ console.",
          "scope": "window",
          "examples": [
            true,
            false
          ]
        }
      }
    },
    "jsonValidation": [
      {
        "fileMatch": [
          "import*map*.json",
          "importMap*.json"
        ],
        "url": "./schemas/import_map.schema.json"
      },
      {
        "fileMatch": [
          "deno.json",
          "deno.jsonc"
        ],
        "url": "https://raw.githubusercontent.com/denoland/deno/main/cli/schemas/config-file.v1.json"
      },
      {
        "fileMatch": "deno-import-intellisense.json",
        "url": "./schemas/registry-completions.schema.json"
      },
      {
        "fileMatch": "deno.lock",
        "url": "./schemas/lockfile.schema.json"
      }
    ],
    "languages": [
      {
        "id": "json",
        "filenames": [
          "deno.lock"
        ]
      }
    ],
    "problemPatterns": [
      {
        "name": "deno",
        "patterns": [
          {
            "regexp": "^(warning|error): (?:(\\S+) \\[(?:ERROR|WARN)\\]: )?(.*)$",
            "severity": 1,
            "code": 2,
            "message": 3
          },
          {
            "regexp": "^\\s{4}at\\s.*((?:file|http|https|data|blob):[^:]+):(\\d+):(\\d+)$",
            "file": 1,
            "line": 2,
            "column": 3
          }
        ]
      },
      {
        "name": "deno-test",
        "patterns": [
          {
            "regexp": "^(\\S+:\\s.*)$",
            "message": 1
          },
          {
            "regexp": "^\\s{4}at\\s.*((?:file|http|https|data|blob):[^:]+):(\\d+):(\\d+)$",
            "file": 1,
            "line": 2,
            "column": 3
          }
        ]
      },
      {
        "name": "deno-lint",
        "patterns": [
          {
            "regexp": "^\\(([^)]*)\\)\\s(.*)$",
            "code": 1,
            "message": 2
          },
          {
            "regexp": "^\\s{4}at\\s([^:]+):(\\d+):(\\d+)$",
            "file": 1,
            "line": 2,
            "column": 3
          }
        ]
      }
    ],
    "problemMatchers": [
      {
        "name": "deno",
        "owner": "deno-cli",
        "source": "deno-cli",
        "fileLocation": [
          "absolute"
        ],
        "pattern": "$deno"
      },
      {
        "name": "deno-test",
        "owner": "deno-test",
        "source": "deno-test",
        "fileLocation": [
          "absolute"
        ],
        "severity": "error",
        "pattern": "$deno-test"
      },
      {
        "name": "deno-lint",
        "owner": "deno-lint",
        "source": "deno-lint",
        "fileLocation": [
          "absolute"
        ],
        "severity": "warning",
        "pattern": "$deno-lint"
      }
    ],
    "taskDefinitions": [
      {
        "type": "deno",
        "required": [
          "command"
        ],
        "properties": {
          "label": {
            "type": "string"
          },
          "command": {
            "type": "string",
            "description": "The Deno command to run.",
            "examples": [
              "bundle",
              "cache",
              "compile",
              "lint",
              "test"
            ]
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Arguments to pass to the command."
          },
          "env": {
            "type": "object",
            "patternProperties": {
              ".+": {
                "type": "string"
              }
            },
            "description": "Environment variables to set when executing the command."
          }
        }
      }
    ],
    "typescriptServerPlugins": [
      {
        "name": "typescript-deno-plugin",
        "enableForWorkspaceTypeScriptVersions": true
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm i && npm run esbuild-plugin && npm i && npm run esbuild-base",
    "esbuild-base": "esbuild ./client/src/extension.ts --bundle --outfile=client/dist/main.js --external:vscode --format=cjs --platform=node",
    "esbuild-plugin": "esbuild ./typescript-deno-plugin/src/index.ts --bundle --outfile=typescript-deno-plugin/dist/index.js --external:vscode --format=cjs --platform=node",
    "esbuild": "npm run esbuild-plugin -- --sourcemap && npm run esbuild-base -- --sourcemap",
    "test-compile": "tsc -b",
    "fmt": "deno fmt .vscode .github client/src media schemas typescript-deno-plugin/src typescript-deno-plugin/*.md docs package.json tsconfig.json README.md CHANGELOG.md",
    "lint": "deno lint --unstable client/src typescript-deno-plugin/src docs",
    "postinstall": "cd typescript-deno-plugin && npm i && cd ../client && npm i && cd .."
  },
  "dependencies": {
    "typescript-deno-plugin": "./typescript-deno-plugin"
  },
  "devDependencies": {
    "@types/node": "^14.14.25",
    "esbuild": "^0.14.23",
    "typescript": "^4.5.5"
  }
}
